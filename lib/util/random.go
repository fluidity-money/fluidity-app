// Copyright 2022 Fluidity Money. All rights reserved. Use of this
// source code is governed by a GPL-style license that can be found in the
// LICENSE file.

package util

// random implements cryptographically secure randomness

import (
	"crypto/rand"
	"fmt"
	"github.com/fluidity-money/fluidity-app/lib/log"
)

// RandomString generated by creating a buffer of length / 2, filling it
// up with randomness then returning the base16 encoded form of it.
func RandomString(length int) string {
	buf := make([]byte, length/2)

	if _, err := rand.Read(buf); err != nil {
		log.Fatal(func(k *log.Log) {
			k.Context = Context
			k.Message = "Failed to get a securely random string!"
			k.Payload = err
		})
	}

	return fmt.Sprintf("%x", buf)
}
