
import * as hre from 'hardhat';

import type { ethers } from 'ethers';

import { BigNumber } from 'ethers';

import { expect, assert } from 'chai';

import {
  commonContracts,
  commonFactories,
  signers } from './setup-common';

import { deployGovToken, deployVEGovLockup } from '../deployment';

import { advanceTime, sendEmptyTransaction } from './test-utils';

const getVEFluidBalanceArgs = [
  [34,3818718,4.117085616438356],
  [211,4880256,32.65265144596651],
  [530,6189975,104.0298944063927],
  [60,11708542,22.27652587519026],
  [696,3789303,83.62997488584475],
  [51,24592490,39.77095985540335],
  [75,31342204,74.53910768645358],
  [206,4274826,27.924091704718418],
  [570,29027798,524.6652987062405],
  [922,2168346,63.39469216133942],
  [864,654484,17.931068493150686],
  [818,21981012,570.156894216134],
  [409,13528534,175.45568258498224],
  [278,28205359,248.63932654743786],
  [825,29052526,760.0308837519026],
  [219,93339,0.6481875],
  [391,25255715,313.13370639903604],
  [430,2009844,27.404646118721462],
  [779,17582025,434.3099148592085],
  [533,6879099,116.26584750761035],
  [425,29731259,400.6781162798072],
  [562,9834464,175.25902993404364],
  [244,27774345,214.89536339421613],
  [293,3415734,31.73547888127854],
  [555,18400347,323.82650256849314],
  [985,23851256,744.9735908168442],
  [643,15121676,308.32184386098425],
  [200,3769721,23.907413749365805],
  [450,9734579,138.90666381278538],
  [904,3345339,95.89632343987823],
  [615,12286146,239.59854737442922],
  [626,17018541,337.8236512557078],
  [835,30698432,812.8231456113648],
  [321,24851711,252.96167018645357],
  [895,14753996,418.7222989599188],
  [297,26417436,248.79434589041097],
  [876,26789057,744.1404722222222],
  [740,17214872,403.9512075088787],
  [378,332525,3.9857448630136987],
  [582,19905877,367.36492941400303],
  [85,15917965,42.90420551116185],
  [977,26816615,830.7912498414511],
  [247,10538340,82.53963660578387],
  [210,29572367,196.92405726788434],
  [216,13291637,91.0386095890411],
  [328,7295405,75.87813419583968],
  [385,978663,11.947782058599696],
  [55,3510952,6.123235667174023],
  [362,29620442,340.0114156519533],
  [386,25710884,314.70069837645866],
  [121,6235705,23.92568191907661],
  [744,24366154,574.8483820395738],
  [218,20014940,138.35796930492137],
  [884,25789439,722.9155275240994],
  [74,23123209,54.25917890664637],
  [366,29125526,338.0245597412481],
  [879,21875333,609.7291256659056],
  [782,1343156,33.30631633688483],
  [321,16110388,163.98511377473363],
  [753,8897422,212.4479568112633],
  [482,8222249,125.6698382166413],
  [61,26109252,50.50305593607306],
  [186,18233664,107.5425388127854],
  [930,18817839,554.9400770547945],
  [902,5741265,164.21299562404872],
  [343,15947793,173.45551113013698],
  [876,12013526,333.70905555555555],
  [121,13821119,53.030041825215626],
  [35,14389234,15.969786593099949],
  [291,14935225,137.81552749238966],
  [724,6974027,160.10894051243025],
  [80,18730257,47.514604261796045],
  [792,24461980,614.3419634703197],
  [564,23590304,421.8966088280061],
  [368,18849033,219.953200913242],
  [665,18186216,383.4929490106545],
  [264,30563697,255.86047716894979],
  [798,27740243,701.9505934170472],
  [377,30632739,366.2018836567732],
  [381,6611041,79.87083399923897],
  [638,27928841,565.0241171359716],
  [674,3995864,85.40120294266869],
  [323,4421111,45.2821807775241],
  [749,19557189,464.49564183789954],
  [561,1213467,21.586599029680364],
  [406,23399013,301.24300095129377],
  [543,30983956,533.4946761796043],
  [985,19319040,603.413698630137],
  [526,15203924,253.59157864028413],
  [631,27801794,556.2827249492643],
  [675,5506284,117.85710616438357],
  [324,28662928,294.4821369863014],
  [259,13367466,109.78480764840182],
  [4,31078826,3.942012430238458],
  [268,10126377,86.05622260273972],
  [595,22836080,430.85577118214104],
  [733,19521967,453.754496797311],
  [152,20711976,99.82941248097413],
  [855,9612534,260.61379280821916],
  [639,1809229,36.659605878995436]
];

const getVEFluidDecayPerSecondArgs = [
  [963,3.05365296803653e-05],
  [535,1.6964738711314055e-05],
  [604,1.915271435819381e-05],
  [713,2.260908168442415e-05],
  [43,1.3635210553018772e-06],
  [697,2.2101725012683916e-05],
  [130,4.122272957889396e-06],
  [403,1.2779046169457128e-05],
  [28,8.878741755454085e-07],
  [414,1.3127853881278538e-05],
  [712,2.2577371892440387e-05],
  [77,2.441653982749873e-06],
  [848,2.6889903602232368e-05],
  [512,1.6235413495687468e-05],
  [285,9.037290715372907e-06],
  [559,1.7725773718924403e-05],
  [112,3.551496702181634e-06],
  [953,3.021943176052765e-05],
  [274,8.688483003551497e-06],
  [78,2.4733637747336377e-06],
  [677,2.1467529173008624e-05],
  [645,2.0452815829528157e-05],
  [354,1.1225266362252664e-05],
  [289,9.164129883307965e-06],
  [101,3.202688990360223e-06],
  [75,2.378234398782344e-06],
  [588,1.8645357686453578e-05],
  [666,2.1118721461187216e-05],
  [888,2.815829528158295e-05],
  [501,1.5886605783866056e-05],
  [123,3.900304414003044e-06],
  [702,2.226027397260274e-05],
  [813,2.578006088280061e-05],
  [719,2.279934043632674e-05],
  [272,8.625063419583968e-06],
  [348,1.1035007610350076e-05],
  [571,1.810629122272958e-05],
  [951,3.015601217656012e-05],
  [445,1.4110857432775241e-05],
  [9,2.853881278538813e-07],
  [656,2.080162354134957e-05],
  [522,1.6552511415525115e-05],
  [452,1.4332825976661593e-05],
  [297,9.417808219178083e-06],
  [579,1.8359969558599695e-05],
  [349,1.106671740233384e-05],
  [231,7.3249619482496195e-06],
  [866,2.746067985794013e-05],
  [547,1.7345256215119227e-05],
  [22,6.976154236428209e-07],
  [270,8.561643835616438e-06],
  [188,5.9614408929477425e-06],
  [428,1.3571790969051244e-05],
  [875,2.774606798579401e-05],
  [94,2.9807204464738713e-06],
  [63,1.997716894977169e-06],
  [679,2.1530948756976156e-05],
  [25,7.927447995941147e-07],
  [973,3.0853627600202945e-05],
  [747,2.3687214611872146e-05],
  [180,5.707762557077626e-06],
  [408,1.293759512937595e-05],
  [753,2.3877473363774734e-05],
  [410,1.300101471334348e-05],
  [316,1.0020294266869609e-05],
  [948,3.006088280060883e-05],
  [142,4.502790461694572e-06],
  [208,6.595636732623034e-06],
  [792,2.5114155251141553e-05],
  [453,1.4364535768645357e-05],
  [269,8.529934043632674e-06],
  [502,1.5918315575849824e-05],
  [289,9.164129883307965e-06],
  [139,4.407661085743278e-06],
  [364,1.154236428209031e-05],
  [797,2.5272704211060377e-05],
  [254,8.054287163876204e-06],
  [453,1.4364535768645357e-05],
  [871,2.7619228817858955e-05],
  [492,1.5601217656012176e-05],
  [340,1.078132927447996e-05],
  [838,2.6572805682394724e-05],
  [169,5.358954845256215e-06],
  [699,2.2165144596651447e-05],
  [507,1.6076864535768644e-05],
  [554,1.756722475900558e-05],
  [635,2.0135717909690513e-05],
  [187,5.929731100963978e-06],
  [423,1.341324200913242e-05],
  [630,1.997716894977169e-05],
  [836,2.6509386098427196e-05],
  [661,2.0960172501268392e-05],
  [985,3.123414510400812e-05],
  [816,2.58751902587519e-05],
  [222,7.039573820395738e-06],
  [511,1.6203703703703704e-05],
  [981,3.110730593607306e-05],
  [855,2.711187214611872e-05],
  [441,1.3984018264840183e-05],
  [643,2.038939624556063e-05]
];

const simpleLockTests = [
  [791,10430362,7317551,78.0769121321664],
  [167,17322579,4314549,68.88448154490106],
  [27,2756897,2466765,0.2484006849315068]
];

const timedBPTIncreaseTests = [
  [756,23600057,13203880,875,537.6764550672248],
  [495,18905868,15734508,595,109.61385083713851],
  [838,21215117,10154270,385,428.95154366438356],
  [526,18533099,12937437,92,109.65623782343988],
  [288,5538836,2718305,350,57.06173192541857],
  [570,24550483,13865819,540,376.07740487062404],
  [810,4094849,2902209,935,65.99304921359716],
  [361,1061946,841748,561,6.437803018772197],
  [936,20798788,12253834,823,476.61637766362253],
  [731,21978435,15844886,898,316.83001398401825],
  [318,1031366,190681,698,27.08447361745307],
  [299,2363960,150953,466,53.68310359589041],
  [858,20412993,4739061,643,746.0227020547945],
  [148,27263966,9507618,795,530.9562456874683],
  [231,8909247,1263485,528,184.01615163622526],
  [849,6619391,3713703,905,161.61138863521055],
  [814,15856117,3670473,847,641.8174367072552],
  [235,13252568,1712209,804,380.21413625697613],
  [636,19116612,4403411,599,576.1923907597666],
  [649,11479641,5617897,334,182.7148132927448],
  [723,24108178,7177372,760,796.181674847793],
  [784,25159166,8509441,598,729.6397751775748],
  [461,897104,889312,466,0.22904566210045663],
  [367,2201064,688741,269,30.49966476407915],
  [839,9341972,4235086,415,203.07061910197868],
  [371,10491305,6723324,56,51.01876861364789],
  [764,13825950,2970342,535,447.15356392694065],
  [530,24253015,4783658,148,418.5763586377473],
  [809,28326634,25799465,64,69.95873087899544],
  [194,8403578,6484630,939,68.94241768138001],
  [448,27007642,5233761,229,467.4314255771182],
  [180,28997465,19405870,421,182.7926368277524],
  [331,10786995,1570085,514,246.9650225139523],
  [532,12443949,4734498,462,242.9982969939117],
  [950,27165684,4023359,266,892.3473871131405],
  [14,5266005,1492860,163,21.177278824200915],
  [114,10734022,7786005,809,86.2829683853374],
  [401,24650481,4708671,677,681.6739973363775],
  [633,26656254,17522951,843,427.4719440639269],
  [407,26219713,2306176,813,925.1178063165905],
  [890,20304985,8650528,951,680.3607095700153],
  [103,29047054,2400493,37,118.29396689497717],
  [50,19645668,4055188,585,313.92550735667174],
  [615,5427223,2530364,60,62.0046875],
  [188,14595113,8932966,650,150.45913197615423],
  [424,13540466,12371130,974,51.83700304414003],
  [42,17901498,17683024,978,7.066320395738204],
  [209,28150256,17409162,862,364.7803042237443],
  [761,3414522,1066662,20,58.14556887366819],
  [563,31146486,28857745,392,69.30960346905124],
  [501,23781196,3510591,641,734.0509547818366],
  [842,4241262,1632960,232,88.82915867579909],
  [337,29014686,21375568,743,261.6136301369863],
  [149,17543826,3238183,442,268.0947175608828],
  [76,13366438,5671195,576,159.0974897260274],
  [606,28442071,4850661,992,1195.4297685185186],
  [490,16541632,1390515,903,669.2512043696094],
  [434,27071833,3932469,809,912.0443129122273],
  [567,8394652,3799294,820,202.11065277777777],
  [197,5120585,4583194,988,20.193059836377472],
  [505,13125740,9242329,635,140.38205669710806],
  [685,645275,271405,210,10.610529236428208],
  [265,11780716,10693633,435,24.12982305936073],
  [670,25186391,12802539,355,402.50660514967024],
  [774,7854213,6704657,303,39.258999619482495],
  [432,12401862,3029112,575,299.28840848554034],
  [885,24693102,2704619,602,1036.8110800672248],
  [390,19790857,3795815,638,521.4010393201421],
  [533,2315470,1799986,964,24.469797945205478],
  [221,21672280,6084898,52,134.93643093607307],
  [534,20887779,8503858,664,470.44448750634194],
  [532,18352665,2004322,863,723.1715653538813],
  [886,2892077,1434441,588,68.1302468290208],
  [412,775090,460685,240,6.5002555809233895],
  [860,31531761,15429582,673,782.7448125],
  [222,6457985,4649678,655,50.28809103881279],
  [179,11813323,3783840,662,214.12973119609336],
  [799,26060192,18770652,334,261.8927200659564],
  [89,23021392,7195261,54,71.76359503424658],
  [248,10017660,6936840,746,97.10600837138509],
  [457,21891059,17599055,959,192.71555251141552],
  [166,23607203,5258880,140,178.03738070776257],
  [686,29874106,4461534,552,997.6142864028412],
  [50,13062523,9302598,585,75.7087891615931],
  [216,6638997,5140106,875,51.85470830162354],
  [129,5893419,889043,593,114.57253526128869],
  [847,19028458,2078376,339,637.4555191527144],
  [509,30356623,24137129,574,213.5880264459665],
  [508,923078,234076,799,28.555479895991883],
  [330,30152703,8867825,799,762.0061917174023],
  [218,3547666,652043,609,75.9348116755454],
  [804,5947591,4962771,54,26.793999238964993],
  [325,2263700,1680246,75,7.400481988838153],
  [563,25002616,8672025,890,752.421002124556],
  [849,20689228,17130835,380,138.67532334474885],
  [608,5357239,5165985,614,7.4109712075088785],
  [211,31004776,8235551,786,719.8413662163877],
  [243,27055201,17001898,888,360.5493941210046],
  [257,25640716,7346054,588,490.2013378361238],
  [304,30169401,17627108,98,159.88082781582952]
];

describe("VEGovLockup", async () => {
  let veGovLockupFactory: ethers.ContractFactory;

  let govTokenFactory: ethers.ContractFactory;

  let veGovLockup: ethers.Contract;

  let veGovTokenSigner: ethers.Signer;

  let veGovTokenSignerAddress: string;

  before(async () => {
    veGovLockup = commonContracts.veGovLockup;

    ({
      veGovLockup: veGovLockupFactory,
      govToken: govTokenFactory
    } = commonFactories);

    veGovTokenSigner = signers.govToken.owner;

    veGovTokenSignerAddress = await veGovTokenSigner.getAddress();
  });

  it("have the ve fluid decay per second function work accurately", async () => {
    await Promise.all(getVEFluidDecayPerSecondArgs.map(async ([bptLocked, expectedOut]) => {
      const input = BigNumber.from(Math.floor(bptLocked));

      expect(await veGovLockup.calcVEFluidDecayPerSecond(input))
        .to.be.equal(Math.floor(expectedOut * 1e18))
    }));
  });

  it("have the get ve fluid balance function work accurately", async () => {
    await Promise.all(getVEFluidBalanceArgs.map(async ([bptLocked, lockTime, veFluid_], i) => {
      const veFluid = BigInt(veFluid_ * 1e18);

      const out = await veGovLockup.getVEFluidBalance(bptLocked, lockTime);

      assert(
        BigNumber.from(veFluid).sub(out).abs().lt(1e6),
        `${veFluid} at pos ${i} is not the same as ${out} which is too different!`
      );
    }));
  });

  it("should wrap X amount, should advance time by Y, should return", async () => {
    for (const [bptLocked, lockTime, secondsToAdvance, expected_] of simpleLockTests) {
      const newToken = await deployGovToken(
        govTokenFactory,
        veGovTokenSigner,
        "should wrap",
        "test",
        18,
        1000
      );

      const newVEGovLockup = await deployVEGovLockup(
        veGovLockupFactory,
        veGovTokenSigner,
        newToken.address
      );

      await newToken.approve(newVEGovLockup.address, bptLocked);

      await newVEGovLockup.createLock(bptLocked, lockTime);

      await advanceTime(hre, secondsToAdvance);

      await sendEmptyTransaction(veGovTokenSigner);

      const bal = await newVEGovLockup.balanceOf(veGovTokenSignerAddress);

      const expected = BigInt(expected_ * 1e18);

      const difference = BigNumber.from(bal).sub(expected).abs();

      assert(difference.lt(1e12), `${bal} is not the same as ${expected}, difference is ${difference}`);
    }
  });

  it("create lock, pass time, add extra bpt, compare", async() => {
    for (const lockTest of timedBPTIncreaseTests) {
      const [
        bptLocked,
        lockTime,
        secondsToAdvance,
        bptAdded,
        expected_
      ] = lockTest;

      const newToken = await deployGovToken(
        govTokenFactory,
        veGovTokenSigner,
        "should wrap",
        "test",
        18,
        1e10
      );

      const newVEGovLockup = await deployVEGovLockup(
        veGovLockupFactory,
        veGovTokenSigner,
        newToken.address
      );

      await newToken.approve(
        newVEGovLockup.address,
        bptLocked + bptAdded
      );

      await newVEGovLockup.createLock(bptLocked, lockTime);

      await advanceTime(hre, secondsToAdvance);

      await newVEGovLockup.increaseBPTAmount(bptAdded);

      await sendEmptyTransaction(veGovTokenSigner);

      const bal = await newVEGovLockup.balanceOf(veGovTokenSignerAddress);

      const expected = BigInt(expected_ * 1e18);

      const difference = BigNumber.from(bal).sub(expected).abs();

      assert(difference.lt(1e14), `${bal} is hugely different than ${expected}, difference is ${difference} `);
    }
  });
});
