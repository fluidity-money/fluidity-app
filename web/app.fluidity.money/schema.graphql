schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "app_performance_return"
"""
type app_performance_return {
  application: String
  average_reward: float8
  count: bigint
  highest_reward: float8
  network: network_blockchain
}

"""
Boolean expression to filter rows from the table "app_performance_return". All fields are combined with a logical 'AND'.
"""
input app_performance_return_bool_exp {
  _and: [app_performance_return_bool_exp!]
  _not: app_performance_return_bool_exp
  _or: [app_performance_return_bool_exp!]
  application: String_comparison_exp
  average_reward: float8_comparison_exp
  count: bigint_comparison_exp
  highest_reward: float8_comparison_exp
  network: network_blockchain_comparison_exp
}

"""Ordering options when selecting data from "app_performance_return"."""
input app_performance_return_order_by {
  application: order_by
  average_reward: order_by
  count: order_by
  highest_reward: order_by
  network: order_by
}

"""
select columns of table "app_performance_return"
"""
enum app_performance_return_select_column {
  """column name"""
  application

  """column name"""
  average_reward

  """column name"""
  count

  """column name"""
  highest_reward

  """column name"""
  network
}

"""
Streaming cursor of the table "app_performance_return"
"""
input app_performance_return_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: app_performance_return_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input app_performance_return_stream_cursor_value_input {
  application: String
  average_reward: float8
  count: bigint
  highest_reward: float8
  network: network_blockchain
}

input application_performance_args {
  i: interval
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar ethereum_application

"""
Boolean expression to compare columns of type "ethereum_application". All fields are combined with logical 'AND'.
"""
input ethereum_application_comparison_exp {
  _eq: ethereum_application
  _gt: ethereum_application
  _gte: ethereum_application
  _in: [ethereum_application!]
  _is_null: Boolean
  _lt: ethereum_application
  _lte: ethereum_application
  _neq: ethereum_application
  _nin: [ethereum_application!]
}

"""
columns and relationships of "ethereum_pending_winners"
"""
type ethereum_pending_winners {
  address: String!
  block_number: numeric!
  inserted_date: timestamp
  network: network_blockchain!
  reward_sent: Boolean!
  reward_type: reward_direction
  token_decimals: Int!
  token_short_name: String!
  transaction_hash: String!
  win_amount: numeric!
}

"""
Boolean expression to filter rows from the table "ethereum_pending_winners". All fields are combined with a logical 'AND'.
"""
input ethereum_pending_winners_bool_exp {
  _and: [ethereum_pending_winners_bool_exp!]
  _not: ethereum_pending_winners_bool_exp
  _or: [ethereum_pending_winners_bool_exp!]
  address: String_comparison_exp
  block_number: numeric_comparison_exp
  inserted_date: timestamp_comparison_exp
  network: network_blockchain_comparison_exp
  reward_sent: Boolean_comparison_exp
  reward_type: reward_direction_comparison_exp
  token_decimals: Int_comparison_exp
  token_short_name: String_comparison_exp
  transaction_hash: String_comparison_exp
  win_amount: numeric_comparison_exp
}

"""Ordering options when selecting data from "ethereum_pending_winners"."""
input ethereum_pending_winners_order_by {
  address: order_by
  block_number: order_by
  inserted_date: order_by
  network: order_by
  reward_sent: order_by
  reward_type: order_by
  token_decimals: order_by
  token_short_name: order_by
  transaction_hash: order_by
  win_amount: order_by
}

"""
select columns of table "ethereum_pending_winners"
"""
enum ethereum_pending_winners_select_column {
  """column name"""
  address

  """column name"""
  block_number

  """column name"""
  inserted_date

  """column name"""
  network

  """column name"""
  reward_sent

  """column name"""
  reward_type

  """column name"""
  token_decimals

  """column name"""
  token_short_name

  """column name"""
  transaction_hash

  """column name"""
  win_amount
}

"""
Streaming cursor of the table "ethereum_pending_winners"
"""
input ethereum_pending_winners_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ethereum_pending_winners_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ethereum_pending_winners_stream_cursor_value_input {
  address: String
  block_number: numeric
  inserted_date: timestamp
  network: network_blockchain
  reward_sent: Boolean
  reward_type: reward_direction
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  win_amount: numeric
}

"""
columns and relationships of "expected_rewards"
"""
type expected_rewards {
  average_reward: float8
  awarded_month: timestamp
  count: bigint
  highest_reward: float8
  network: network_blockchain
  token_short_name: String
}

"""
Boolean expression to filter rows from the table "expected_rewards". All fields are combined with a logical 'AND'.
"""
input expected_rewards_bool_exp {
  _and: [expected_rewards_bool_exp!]
  _not: expected_rewards_bool_exp
  _or: [expected_rewards_bool_exp!]
  average_reward: float8_comparison_exp
  awarded_month: timestamp_comparison_exp
  count: bigint_comparison_exp
  highest_reward: float8_comparison_exp
  network: network_blockchain_comparison_exp
  token_short_name: String_comparison_exp
}

"""Ordering options when selecting data from "expected_rewards"."""
input expected_rewards_order_by {
  average_reward: order_by
  awarded_month: order_by
  count: order_by
  highest_reward: order_by
  network: order_by
  token_short_name: order_by
}

"""
select columns of table "expected_rewards"
"""
enum expected_rewards_select_column {
  """column name"""
  average_reward

  """column name"""
  awarded_month

  """column name"""
  count

  """column name"""
  highest_reward

  """column name"""
  network

  """column name"""
  token_short_name
}

"""
Streaming cursor of the table "expected_rewards"
"""
input expected_rewards_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: expected_rewards_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input expected_rewards_stream_cursor_value_input {
  average_reward: float8
  awarded_month: timestamp
  count: bigint
  highest_reward: float8
  network: network_blockchain
  token_short_name: String
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "highest_reward_winner_totals"
"""
type highest_reward_winner_totals {
  network: network_blockchain
  total_winnings: float8
  transaction_count: bigint
  winning_address: String
}

"""
Boolean expression to filter rows from the table "highest_reward_winner_totals". All fields are combined with a logical 'AND'.
"""
input highest_reward_winner_totals_bool_exp {
  _and: [highest_reward_winner_totals_bool_exp!]
  _not: highest_reward_winner_totals_bool_exp
  _or: [highest_reward_winner_totals_bool_exp!]
  network: network_blockchain_comparison_exp
  total_winnings: float8_comparison_exp
  transaction_count: bigint_comparison_exp
  winning_address: String_comparison_exp
}

"""
Ordering options when selecting data from "highest_reward_winner_totals".
"""
input highest_reward_winner_totals_order_by {
  network: order_by
  total_winnings: order_by
  transaction_count: order_by
  winning_address: order_by
}

"""
select columns of table "highest_reward_winner_totals"
"""
enum highest_reward_winner_totals_select_column {
  """column name"""
  network

  """column name"""
  total_winnings

  """column name"""
  transaction_count

  """column name"""
  winning_address
}

"""
Streaming cursor of the table "highest_reward_winner_totals"
"""
input highest_reward_winner_totals_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: highest_reward_winner_totals_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input highest_reward_winner_totals_stream_cursor_value_input {
  network: network_blockchain
  total_winnings: float8
  transaction_count: bigint
  winning_address: String
}

"""
columns and relationships of "highest_rewards_monthly"
"""
type highest_rewards_monthly {
  awarded_day: timestamp
  created: timestamp
  network: network_blockchain
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  winning_address: String
  winning_amount: numeric
  winning_amount_scaled: float8
}

"""
Boolean expression to filter rows from the table "highest_rewards_monthly". All fields are combined with a logical 'AND'.
"""
input highest_rewards_monthly_bool_exp {
  _and: [highest_rewards_monthly_bool_exp!]
  _not: highest_rewards_monthly_bool_exp
  _or: [highest_rewards_monthly_bool_exp!]
  awarded_day: timestamp_comparison_exp
  created: timestamp_comparison_exp
  network: network_blockchain_comparison_exp
  token_decimals: Int_comparison_exp
  token_short_name: String_comparison_exp
  transaction_hash: String_comparison_exp
  winning_address: String_comparison_exp
  winning_amount: numeric_comparison_exp
  winning_amount_scaled: float8_comparison_exp
}

"""Ordering options when selecting data from "highest_rewards_monthly"."""
input highest_rewards_monthly_order_by {
  awarded_day: order_by
  created: order_by
  network: order_by
  token_decimals: order_by
  token_short_name: order_by
  transaction_hash: order_by
  winning_address: order_by
  winning_amount: order_by
  winning_amount_scaled: order_by
}

"""
select columns of table "highest_rewards_monthly"
"""
enum highest_rewards_monthly_select_column {
  """column name"""
  awarded_day

  """column name"""
  created

  """column name"""
  network

  """column name"""
  token_decimals

  """column name"""
  token_short_name

  """column name"""
  transaction_hash

  """column name"""
  winning_address

  """column name"""
  winning_amount

  """column name"""
  winning_amount_scaled
}

"""
Streaming cursor of the table "highest_rewards_monthly"
"""
input highest_rewards_monthly_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: highest_rewards_monthly_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input highest_rewards_monthly_stream_cursor_value_input {
  awarded_day: timestamp
  created: timestamp
  network: network_blockchain
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  winning_address: String
  winning_amount: numeric
  winning_amount_scaled: float8
}

scalar interval

scalar network_blockchain

"""
Boolean expression to compare columns of type "network_blockchain". All fields are combined with logical 'AND'.
"""
input network_blockchain_comparison_exp {
  _eq: network_blockchain
  _gt: network_blockchain
  _gte: network_blockchain
  _in: [network_blockchain!]
  _is_null: Boolean
  _lt: network_blockchain
  _lte: network_blockchain
  _neq: network_blockchain
  _nin: [network_blockchain!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "app_performance_return"
  """
  app_performance_return(
    """distinct select on columns"""
    distinct_on: [app_performance_return_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_return_order_by!]

    """filter the rows returned"""
    where: app_performance_return_bool_exp
  ): [app_performance_return!]!

  """
  execute function "application_performance" which returns "app_performance_return"
  """
  application_performance(
    """
    input parameters for function "application_performance"
    """
    args: application_performance_args!

    """distinct select on columns"""
    distinct_on: [app_performance_return_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_return_order_by!]

    """filter the rows returned"""
    where: app_performance_return_bool_exp
  ): [app_performance_return!]!

  """
  fetch data from the table: "ethereum_pending_winners"
  """
  ethereum_pending_winners(
    """distinct select on columns"""
    distinct_on: [ethereum_pending_winners_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ethereum_pending_winners_order_by!]

    """filter the rows returned"""
    where: ethereum_pending_winners_bool_exp
  ): [ethereum_pending_winners!]!

  """
  fetch data from the table: "expected_rewards"
  """
  expected_rewards(
    """distinct select on columns"""
    distinct_on: [expected_rewards_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expected_rewards_order_by!]

    """filter the rows returned"""
    where: expected_rewards_bool_exp
  ): [expected_rewards!]!

  """
  fetch data from the table: "highest_reward_winner_totals"
  """
  highest_reward_winner_totals(
    """distinct select on columns"""
    distinct_on: [highest_reward_winner_totals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highest_reward_winner_totals_order_by!]

    """filter the rows returned"""
    where: highest_reward_winner_totals_bool_exp
  ): [highest_reward_winner_totals!]!

  """
  fetch data from the table: "highest_rewards_monthly"
  """
  highest_rewards_monthly(
    """distinct select on columns"""
    distinct_on: [highest_rewards_monthly_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highest_rewards_monthly_order_by!]

    """filter the rows returned"""
    where: highest_rewards_monthly_bool_exp
  ): [highest_rewards_monthly!]!

  """
  execute function "total_reward" which returns "total_reward_return"
  """
  total_reward(
    """
    input parameters for function "total_reward"
    """
    args: total_reward_args!

    """distinct select on columns"""
    distinct_on: [total_reward_return_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [total_reward_return_order_by!]

    """filter the rows returned"""
    where: total_reward_return_bool_exp
  ): total_reward_return

  """
  fetch data from the table: "total_reward_return"
  """
  total_reward_return(
    """distinct select on columns"""
    distinct_on: [total_reward_return_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [total_reward_return_order_by!]

    """filter the rows returned"""
    where: total_reward_return_bool_exp
  ): [total_reward_return!]!

  """
  fetch data from the table: "tvl"
  """
  tvl(
    """distinct select on columns"""
    distinct_on: [tvl_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tvl_order_by!]

    """filter the rows returned"""
    where: tvl_bool_exp
  ): [tvl!]!

  """
  fetch aggregated fields from the table: "tvl"
  """
  tvl_aggregate(
    """distinct select on columns"""
    distinct_on: [tvl_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tvl_order_by!]

    """filter the rows returned"""
    where: tvl_bool_exp
  ): tvl_aggregate!

  """
  fetch data from the table: "user_actions"
  """
  user_actions(
    """distinct select on columns"""
    distinct_on: [user_actions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_actions_order_by!]

    """filter the rows returned"""
    where: user_actions_bool_exp
  ): [user_actions!]!

  """
  fetch aggregated fields from the table: "user_actions"
  """
  user_actions_aggregate(
    """distinct select on columns"""
    distinct_on: [user_actions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_actions_order_by!]

    """filter the rows returned"""
    where: user_actions_bool_exp
  ): user_actions_aggregate!

  """
  fetch data from the table: "winners"
  """
  winners(
    """distinct select on columns"""
    distinct_on: [winners_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [winners_order_by!]

    """filter the rows returned"""
    where: winners_bool_exp
  ): [winners!]!

  """
  fetch aggregated fields from the table: "winners"
  """
  winners_aggregate(
    """distinct select on columns"""
    distinct_on: [winners_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [winners_order_by!]

    """filter the rows returned"""
    where: winners_bool_exp
  ): winners_aggregate!
}

scalar reward_direction

"""
Boolean expression to compare columns of type "reward_direction". All fields are combined with logical 'AND'.
"""
input reward_direction_comparison_exp {
  _eq: reward_direction
  _gt: reward_direction
  _gte: reward_direction
  _in: [reward_direction!]
  _is_null: Boolean
  _lt: reward_direction
  _lte: reward_direction
  _neq: reward_direction
  _nin: [reward_direction!]
}

scalar solana_application

"""
Boolean expression to compare columns of type "solana_application". All fields are combined with logical 'AND'.
"""
input solana_application_comparison_exp {
  _eq: solana_application
  _gt: solana_application
  _gte: solana_application
  _in: [solana_application!]
  _is_null: Boolean
  _lt: solana_application
  _lte: solana_application
  _neq: solana_application
  _nin: [solana_application!]
}

type subscription_root {
  """
  fetch data from the table: "app_performance_return"
  """
  app_performance_return(
    """distinct select on columns"""
    distinct_on: [app_performance_return_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_return_order_by!]

    """filter the rows returned"""
    where: app_performance_return_bool_exp
  ): [app_performance_return!]!

  """
  fetch data from the table in a streaming manner: "app_performance_return"
  """
  app_performance_return_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [app_performance_return_stream_cursor_input]!

    """filter the rows returned"""
    where: app_performance_return_bool_exp
  ): [app_performance_return!]!

  """
  execute function "application_performance" which returns "app_performance_return"
  """
  application_performance(
    """
    input parameters for function "application_performance"
    """
    args: application_performance_args!

    """distinct select on columns"""
    distinct_on: [app_performance_return_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_return_order_by!]

    """filter the rows returned"""
    where: app_performance_return_bool_exp
  ): [app_performance_return!]!

  """
  fetch data from the table: "ethereum_pending_winners"
  """
  ethereum_pending_winners(
    """distinct select on columns"""
    distinct_on: [ethereum_pending_winners_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ethereum_pending_winners_order_by!]

    """filter the rows returned"""
    where: ethereum_pending_winners_bool_exp
  ): [ethereum_pending_winners!]!

  """
  fetch data from the table in a streaming manner: "ethereum_pending_winners"
  """
  ethereum_pending_winners_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ethereum_pending_winners_stream_cursor_input]!

    """filter the rows returned"""
    where: ethereum_pending_winners_bool_exp
  ): [ethereum_pending_winners!]!

  """
  fetch data from the table: "expected_rewards"
  """
  expected_rewards(
    """distinct select on columns"""
    distinct_on: [expected_rewards_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expected_rewards_order_by!]

    """filter the rows returned"""
    where: expected_rewards_bool_exp
  ): [expected_rewards!]!

  """
  fetch data from the table in a streaming manner: "expected_rewards"
  """
  expected_rewards_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [expected_rewards_stream_cursor_input]!

    """filter the rows returned"""
    where: expected_rewards_bool_exp
  ): [expected_rewards!]!

  """
  fetch data from the table: "highest_reward_winner_totals"
  """
  highest_reward_winner_totals(
    """distinct select on columns"""
    distinct_on: [highest_reward_winner_totals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highest_reward_winner_totals_order_by!]

    """filter the rows returned"""
    where: highest_reward_winner_totals_bool_exp
  ): [highest_reward_winner_totals!]!

  """
  fetch data from the table in a streaming manner: "highest_reward_winner_totals"
  """
  highest_reward_winner_totals_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [highest_reward_winner_totals_stream_cursor_input]!

    """filter the rows returned"""
    where: highest_reward_winner_totals_bool_exp
  ): [highest_reward_winner_totals!]!

  """
  fetch data from the table: "highest_rewards_monthly"
  """
  highest_rewards_monthly(
    """distinct select on columns"""
    distinct_on: [highest_rewards_monthly_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highest_rewards_monthly_order_by!]

    """filter the rows returned"""
    where: highest_rewards_monthly_bool_exp
  ): [highest_rewards_monthly!]!

  """
  fetch data from the table in a streaming manner: "highest_rewards_monthly"
  """
  highest_rewards_monthly_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [highest_rewards_monthly_stream_cursor_input]!

    """filter the rows returned"""
    where: highest_rewards_monthly_bool_exp
  ): [highest_rewards_monthly!]!

  """
  execute function "total_reward" which returns "total_reward_return"
  """
  total_reward(
    """
    input parameters for function "total_reward"
    """
    args: total_reward_args!

    """distinct select on columns"""
    distinct_on: [total_reward_return_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [total_reward_return_order_by!]

    """filter the rows returned"""
    where: total_reward_return_bool_exp
  ): total_reward_return

  """
  fetch data from the table: "total_reward_return"
  """
  total_reward_return(
    """distinct select on columns"""
    distinct_on: [total_reward_return_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [total_reward_return_order_by!]

    """filter the rows returned"""
    where: total_reward_return_bool_exp
  ): [total_reward_return!]!

  """
  fetch data from the table in a streaming manner: "total_reward_return"
  """
  total_reward_return_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [total_reward_return_stream_cursor_input]!

    """filter the rows returned"""
    where: total_reward_return_bool_exp
  ): [total_reward_return!]!

  """
  fetch data from the table: "tvl"
  """
  tvl(
    """distinct select on columns"""
    distinct_on: [tvl_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tvl_order_by!]

    """filter the rows returned"""
    where: tvl_bool_exp
  ): [tvl!]!

  """
  fetch aggregated fields from the table: "tvl"
  """
  tvl_aggregate(
    """distinct select on columns"""
    distinct_on: [tvl_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tvl_order_by!]

    """filter the rows returned"""
    where: tvl_bool_exp
  ): tvl_aggregate!

  """
  fetch data from the table in a streaming manner: "tvl"
  """
  tvl_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tvl_stream_cursor_input]!

    """filter the rows returned"""
    where: tvl_bool_exp
  ): [tvl!]!

  """
  fetch data from the table: "user_actions"
  """
  user_actions(
    """distinct select on columns"""
    distinct_on: [user_actions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_actions_order_by!]

    """filter the rows returned"""
    where: user_actions_bool_exp
  ): [user_actions!]!

  """
  fetch aggregated fields from the table: "user_actions"
  """
  user_actions_aggregate(
    """distinct select on columns"""
    distinct_on: [user_actions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_actions_order_by!]

    """filter the rows returned"""
    where: user_actions_bool_exp
  ): user_actions_aggregate!

  """
  fetch data from the table in a streaming manner: "user_actions"
  """
  user_actions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_actions_stream_cursor_input]!

    """filter the rows returned"""
    where: user_actions_bool_exp
  ): [user_actions!]!

  """
  fetch data from the table: "winners"
  """
  winners(
    """distinct select on columns"""
    distinct_on: [winners_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [winners_order_by!]

    """filter the rows returned"""
    where: winners_bool_exp
  ): [winners!]!

  """
  fetch aggregated fields from the table: "winners"
  """
  winners_aggregate(
    """distinct select on columns"""
    distinct_on: [winners_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [winners_order_by!]

    """filter the rows returned"""
    where: winners_bool_exp
  ): winners_aggregate!

  """
  fetch data from the table in a streaming manner: "winners"
  """
  winners_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [winners_stream_cursor_input]!

    """filter the rows returned"""
    where: winners_bool_exp
  ): [winners!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

input total_reward_args {
  address: String
  i: interval
}

"""
columns and relationships of "total_reward_return"
"""
type total_reward_return {
  count: bigint
  network: network_blockchain
  total_reward: float8
}

"""
Boolean expression to filter rows from the table "total_reward_return". All fields are combined with a logical 'AND'.
"""
input total_reward_return_bool_exp {
  _and: [total_reward_return_bool_exp!]
  _not: total_reward_return_bool_exp
  _or: [total_reward_return_bool_exp!]
  count: bigint_comparison_exp
  network: network_blockchain_comparison_exp
  total_reward: float8_comparison_exp
}

"""Ordering options when selecting data from "total_reward_return"."""
input total_reward_return_order_by {
  count: order_by
  network: order_by
  total_reward: order_by
}

"""
select columns of table "total_reward_return"
"""
enum total_reward_return_select_column {
  """column name"""
  count

  """column name"""
  network

  """column name"""
  total_reward
}

"""
Streaming cursor of the table "total_reward_return"
"""
input total_reward_return_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: total_reward_return_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input total_reward_return_stream_cursor_value_input {
  count: bigint
  network: network_blockchain
  total_reward: float8
}

"""
columns and relationships of "tvl"
"""
type tvl {
  contract_address: String!
  network: network_blockchain!
  time: timestamp
  tvl: numeric!
}

"""
aggregated selection of "tvl"
"""
type tvl_aggregate {
  aggregate: tvl_aggregate_fields
  nodes: [tvl!]!
}

"""
aggregate fields of "tvl"
"""
type tvl_aggregate_fields {
  avg: tvl_avg_fields
  count(columns: [tvl_select_column!], distinct: Boolean): Int!
  max: tvl_max_fields
  min: tvl_min_fields
  stddev: tvl_stddev_fields
  stddev_pop: tvl_stddev_pop_fields
  stddev_samp: tvl_stddev_samp_fields
  sum: tvl_sum_fields
  var_pop: tvl_var_pop_fields
  var_samp: tvl_var_samp_fields
  variance: tvl_variance_fields
}

"""aggregate avg on columns"""
type tvl_avg_fields {
  tvl: Float
}

"""
Boolean expression to filter rows from the table "tvl". All fields are combined with a logical 'AND'.
"""
input tvl_bool_exp {
  _and: [tvl_bool_exp!]
  _not: tvl_bool_exp
  _or: [tvl_bool_exp!]
  contract_address: String_comparison_exp
  network: network_blockchain_comparison_exp
  time: timestamp_comparison_exp
  tvl: numeric_comparison_exp
}

"""aggregate max on columns"""
type tvl_max_fields {
  contract_address: String
  network: network_blockchain
  time: timestamp
  tvl: numeric
}

"""aggregate min on columns"""
type tvl_min_fields {
  contract_address: String
  network: network_blockchain
  time: timestamp
  tvl: numeric
}

"""Ordering options when selecting data from "tvl"."""
input tvl_order_by {
  contract_address: order_by
  network: order_by
  time: order_by
  tvl: order_by
}

"""
select columns of table "tvl"
"""
enum tvl_select_column {
  """column name"""
  contract_address

  """column name"""
  network

  """column name"""
  time

  """column name"""
  tvl
}

"""aggregate stddev on columns"""
type tvl_stddev_fields {
  tvl: Float
}

"""aggregate stddev_pop on columns"""
type tvl_stddev_pop_fields {
  tvl: Float
}

"""aggregate stddev_samp on columns"""
type tvl_stddev_samp_fields {
  tvl: Float
}

"""
Streaming cursor of the table "tvl"
"""
input tvl_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tvl_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tvl_stream_cursor_value_input {
  contract_address: String
  network: network_blockchain
  time: timestamp
  tvl: numeric
}

"""aggregate sum on columns"""
type tvl_sum_fields {
  tvl: numeric
}

"""aggregate var_pop on columns"""
type tvl_var_pop_fields {
  tvl: Float
}

"""aggregate var_samp on columns"""
type tvl_var_samp_fields {
  tvl: Float
}

"""aggregate variance on columns"""
type tvl_variance_fields {
  tvl: Float
}

scalar user_action

"""
Boolean expression to compare columns of type "user_action". All fields are combined with logical 'AND'.
"""
input user_action_comparison_exp {
  _eq: user_action
  _gt: user_action
  _gte: user_action
  _in: [user_action!]
  _is_null: Boolean
  _lt: user_action
  _lte: user_action
  _neq: user_action
  _nin: [user_action!]
}

"""
columns and relationships of "user_actions"
"""
type user_actions {
  amount: numeric!
  event_number: bigint!
  network: network_blockchain!
  recipient_address: String
  sender_address: String!
  solana_recipient_owner_address: String
  solana_sender_owner_address: String
  swap_in: Boolean
  time: timestamp
  token_decimals: Int!
  token_short_name: String!
  transaction_hash: String!
  type: user_action!
}

"""
aggregated selection of "user_actions"
"""
type user_actions_aggregate {
  aggregate: user_actions_aggregate_fields
  nodes: [user_actions!]!
}

"""
aggregate fields of "user_actions"
"""
type user_actions_aggregate_fields {
  avg: user_actions_avg_fields
  count(columns: [user_actions_select_column!], distinct: Boolean): Int!
  max: user_actions_max_fields
  min: user_actions_min_fields
  stddev: user_actions_stddev_fields
  stddev_pop: user_actions_stddev_pop_fields
  stddev_samp: user_actions_stddev_samp_fields
  sum: user_actions_sum_fields
  var_pop: user_actions_var_pop_fields
  var_samp: user_actions_var_samp_fields
  variance: user_actions_variance_fields
}

"""aggregate avg on columns"""
type user_actions_avg_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
Boolean expression to filter rows from the table "user_actions". All fields are combined with a logical 'AND'.
"""
input user_actions_bool_exp {
  _and: [user_actions_bool_exp!]
  _not: user_actions_bool_exp
  _or: [user_actions_bool_exp!]
  amount: numeric_comparison_exp
  event_number: bigint_comparison_exp
  network: network_blockchain_comparison_exp
  recipient_address: String_comparison_exp
  sender_address: String_comparison_exp
  solana_recipient_owner_address: String_comparison_exp
  solana_sender_owner_address: String_comparison_exp
  swap_in: Boolean_comparison_exp
  time: timestamp_comparison_exp
  token_decimals: Int_comparison_exp
  token_short_name: String_comparison_exp
  transaction_hash: String_comparison_exp
  type: user_action_comparison_exp
}

"""aggregate max on columns"""
type user_actions_max_fields {
  amount: numeric
  event_number: bigint
  network: network_blockchain
  recipient_address: String
  sender_address: String
  solana_recipient_owner_address: String
  solana_sender_owner_address: String
  time: timestamp
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  type: user_action
}

"""aggregate min on columns"""
type user_actions_min_fields {
  amount: numeric
  event_number: bigint
  network: network_blockchain
  recipient_address: String
  sender_address: String
  solana_recipient_owner_address: String
  solana_sender_owner_address: String
  time: timestamp
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  type: user_action
}

"""Ordering options when selecting data from "user_actions"."""
input user_actions_order_by {
  amount: order_by
  event_number: order_by
  network: order_by
  recipient_address: order_by
  sender_address: order_by
  solana_recipient_owner_address: order_by
  solana_sender_owner_address: order_by
  swap_in: order_by
  time: order_by
  token_decimals: order_by
  token_short_name: order_by
  transaction_hash: order_by
  type: order_by
}

"""
select columns of table "user_actions"
"""
enum user_actions_select_column {
  """column name"""
  amount

  """column name"""
  event_number

  """column name"""
  network

  """column name"""
  recipient_address

  """column name"""
  sender_address

  """column name"""
  solana_recipient_owner_address

  """column name"""
  solana_sender_owner_address

  """column name"""
  swap_in

  """column name"""
  time

  """column name"""
  token_decimals

  """column name"""
  token_short_name

  """column name"""
  transaction_hash

  """column name"""
  type
}

"""aggregate stddev on columns"""
type user_actions_stddev_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""aggregate stddev_pop on columns"""
type user_actions_stddev_pop_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""aggregate stddev_samp on columns"""
type user_actions_stddev_samp_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
Streaming cursor of the table "user_actions"
"""
input user_actions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_actions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_actions_stream_cursor_value_input {
  amount: numeric
  event_number: bigint
  network: network_blockchain
  recipient_address: String
  sender_address: String
  solana_recipient_owner_address: String
  solana_sender_owner_address: String
  swap_in: Boolean
  time: timestamp
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  type: user_action
}

"""aggregate sum on columns"""
type user_actions_sum_fields {
  amount: numeric
  event_number: bigint
  token_decimals: Int
}

"""aggregate var_pop on columns"""
type user_actions_var_pop_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""aggregate var_samp on columns"""
type user_actions_var_samp_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""aggregate variance on columns"""
type user_actions_variance_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
columns and relationships of "winners"
"""
type winners {
  awarded_time: timestamp!
  created: timestamp
  ethereum_application: ethereum_application
  network: network_blockchain!
  reward_type: reward_direction
  send_transaction_hash: String
  solana_application: solana_application
  solana_winning_owner_address: String
  token_decimals: Int!
  token_short_name: String!
  transaction_hash: String!
  winning_address: String!
  winning_amount: numeric!
}

"""
aggregated selection of "winners"
"""
type winners_aggregate {
  aggregate: winners_aggregate_fields
  nodes: [winners!]!
}

"""
aggregate fields of "winners"
"""
type winners_aggregate_fields {
  avg: winners_avg_fields
  count(columns: [winners_select_column!], distinct: Boolean): Int!
  max: winners_max_fields
  min: winners_min_fields
  stddev: winners_stddev_fields
  stddev_pop: winners_stddev_pop_fields
  stddev_samp: winners_stddev_samp_fields
  sum: winners_sum_fields
  var_pop: winners_var_pop_fields
  var_samp: winners_var_samp_fields
  variance: winners_variance_fields
}

"""aggregate avg on columns"""
type winners_avg_fields {
  token_decimals: Float
  winning_amount: Float
}

"""
Boolean expression to filter rows from the table "winners". All fields are combined with a logical 'AND'.
"""
input winners_bool_exp {
  _and: [winners_bool_exp!]
  _not: winners_bool_exp
  _or: [winners_bool_exp!]
  awarded_time: timestamp_comparison_exp
  created: timestamp_comparison_exp
  ethereum_application: ethereum_application_comparison_exp
  network: network_blockchain_comparison_exp
  reward_type: reward_direction_comparison_exp
  send_transaction_hash: String_comparison_exp
  solana_application: solana_application_comparison_exp
  solana_winning_owner_address: String_comparison_exp
  token_decimals: Int_comparison_exp
  token_short_name: String_comparison_exp
  transaction_hash: String_comparison_exp
  winning_address: String_comparison_exp
  winning_amount: numeric_comparison_exp
}

"""aggregate max on columns"""
type winners_max_fields {
  awarded_time: timestamp
  created: timestamp
  ethereum_application: ethereum_application
  network: network_blockchain
  reward_type: reward_direction
  send_transaction_hash: String
  solana_application: solana_application
  solana_winning_owner_address: String
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  winning_address: String
  winning_amount: numeric
}

"""aggregate min on columns"""
type winners_min_fields {
  awarded_time: timestamp
  created: timestamp
  ethereum_application: ethereum_application
  network: network_blockchain
  reward_type: reward_direction
  send_transaction_hash: String
  solana_application: solana_application
  solana_winning_owner_address: String
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  winning_address: String
  winning_amount: numeric
}

"""Ordering options when selecting data from "winners"."""
input winners_order_by {
  awarded_time: order_by
  created: order_by
  ethereum_application: order_by
  network: order_by
  reward_type: order_by
  send_transaction_hash: order_by
  solana_application: order_by
  solana_winning_owner_address: order_by
  token_decimals: order_by
  token_short_name: order_by
  transaction_hash: order_by
  winning_address: order_by
  winning_amount: order_by
}

"""
select columns of table "winners"
"""
enum winners_select_column {
  """column name"""
  awarded_time

  """column name"""
  created

  """column name"""
  ethereum_application

  """column name"""
  network

  """column name"""
  reward_type

  """column name"""
  send_transaction_hash

  """column name"""
  solana_application

  """column name"""
  solana_winning_owner_address

  """column name"""
  token_decimals

  """column name"""
  token_short_name

  """column name"""
  transaction_hash

  """column name"""
  winning_address

  """column name"""
  winning_amount
}

"""aggregate stddev on columns"""
type winners_stddev_fields {
  token_decimals: Float
  winning_amount: Float
}

"""aggregate stddev_pop on columns"""
type winners_stddev_pop_fields {
  token_decimals: Float
  winning_amount: Float
}

"""aggregate stddev_samp on columns"""
type winners_stddev_samp_fields {
  token_decimals: Float
  winning_amount: Float
}

"""
Streaming cursor of the table "winners"
"""
input winners_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: winners_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input winners_stream_cursor_value_input {
  awarded_time: timestamp
  created: timestamp
  ethereum_application: ethereum_application
  network: network_blockchain
  reward_type: reward_direction
  send_transaction_hash: String
  solana_application: solana_application
  solana_winning_owner_address: String
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  winning_address: String
  winning_amount: numeric
}

"""aggregate sum on columns"""
type winners_sum_fields {
  token_decimals: Int
  winning_amount: numeric
}

"""aggregate var_pop on columns"""
type winners_var_pop_fields {
  token_decimals: Float
  winning_amount: Float
}

"""aggregate var_samp on columns"""
type winners_var_samp_fields {
  token_decimals: Float
  winning_amount: Float
}

"""aggregate variance on columns"""
type winners_variance_fields {
  token_decimals: Float
  winning_amount: Float
}

